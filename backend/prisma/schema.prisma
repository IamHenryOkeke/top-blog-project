// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String     @id @default(cuid())
  name        String     @default("JOhn Doe")
  email       String     @unique
  password    String
  role        ROLE       @default(USER)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  accessToken String?
  posts       BlogPost[]

  @@index([email])
}

model BlogPost {
  id             String    @id @default(cuid())
  title          String
  description    String
  thumbnailImage String
  content        String
  isPublished    Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  authorId       String
  user           User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments       Comment[]
  tags           Tag[]     @relation("PostTags")
}

model Comment {
  id        String   @id @default(cuid())
  name      String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  postId    String
  post      BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)
}

enum ROLE {
  ADMIN
  USER
}

model Tag {
  id        String     @id @default(cuid())
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  posts     BlogPost[] @relation("PostTags")

  @@index([name])
}

model OTP {
  id        String   @id @default(cuid())
  email     String
  code      String
  createdAt DateTime @default(now())
  expires   DateTime

  @@index([email])
  @@index([code])
}
