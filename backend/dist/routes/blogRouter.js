"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const { upload } = require("../config/multer");
const blogController_1 = require("../controllers/blogController");
const authMiddlewares_1 = require("../middlewares/authMiddlewares");
const optionalAuthMiddleware_1 = require("../middlewares/optionalAuthMiddleware");
const validation_1 = require("../middlewares/validation");
const schemas_1 = require("../utils/schemas");
const addFilePathToBody_1 = require("../middlewares/addFilePathToBody");
const blogRouter = (0, express_1.Router)();
blogRouter.get("/", optionalAuthMiddleware_1.optionalAuth, (0, validation_1.validate)({ query: schemas_1.blogQuerySchema }), blogController_1.getAllBlogPosts);
blogRouter.get("/latest", optionalAuthMiddleware_1.optionalAuth, blogController_1.getLatestBlogPosts);
blogRouter.post("/", authMiddlewares_1.isAuthenticated, authMiddlewares_1.isAdmin, upload.single('thumbnailImage'), addFilePathToBody_1.addFilePathToBody, (0, validation_1.validate)({ body: schemas_1.createBlogSchema }), blogController_1.createBlogPost);
blogRouter.get("/:blogId", (0, validation_1.validate)({ params: schemas_1.blogParamsSchema }), optionalAuthMiddleware_1.optionalAuth, blogController_1.getBlogPostById);
blogRouter.put("/:blogId", authMiddlewares_1.isAuthenticated, authMiddlewares_1.isAdmin, upload.single('thumbnailImage'), addFilePathToBody_1.addFilePathToBody, (0, validation_1.validate)({ body: schemas_1.updateBlogSchema, params: schemas_1.blogParamsSchema }), blogController_1.updateBlogPost);
blogRouter.delete("/:blogId", authMiddlewares_1.isAuthenticated, authMiddlewares_1.isAdmin, (0, validation_1.validate)({ params: schemas_1.blogParamsSchema }), blogController_1.deleteBlogPost);
blogRouter.get("/:blogId/comments", (0, validation_1.validate)({ params: schemas_1.blogParamsSchema }), optionalAuthMiddleware_1.optionalAuth, blogController_1.getBlogPostComments);
blogRouter.post("/:blogId/comments", (0, validation_1.validate)({ body: schemas_1.createCommentSchema, params: schemas_1.blogParamsSchema }), blogController_1.createBlogComment);
blogRouter.get("/:blogId/comments/:commentId", (0, validation_1.validate)({ params: schemas_1.commentParamsSchema }), optionalAuthMiddleware_1.optionalAuth, blogController_1.getBlogPostCommentById);
blogRouter.put("/:blogId/comments/:commentId", authMiddlewares_1.isAuthenticated, authMiddlewares_1.isAdmin, (0, validation_1.validate)({ body: schemas_1.updateCommentSchema, params: schemas_1.commentParamsSchema }), blogController_1.updateBlogComment);
blogRouter.delete("/:blogId/comments/:commentId", authMiddlewares_1.isAuthenticated, authMiddlewares_1.isAdmin, (0, validation_1.validate)({ params: schemas_1.commentParamsSchema }), blogController_1.deleteBlogPostComment);
exports.default = blogRouter;
